"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[834],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9416:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var r,o=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],l={title:"MetaFlow Features",sidebar_position:3},u=void 0,p={unversionedId:"metaflow",id:"metaflow",title:"MetaFlow Features",description:"nbdoc is an open source project developed at Outerbounds, with the goal of having high quality documentation for Metaflow.  Therefore, it should be no surprise that there are some special features made specifically for Metaflow.",source:"@site/docs/metaflow.md",sourceDirName:".",slug:"/metaflow",permalink:"/nbdoc-docusaurus/docs/metaflow",editUrl:"https://github.com/outerbounds/nbdoc-docusaurus/tree/master/docs/metaflow.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"MetaFlow Features",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Authoring Docs With Notebooks",permalink:"/nbdoc-docusaurus/docs/nb"},next:{title:"Tutorial Intro",permalink:"/nbdoc-docusaurus/docs/Docusaurus/intro"}},c=[],d=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),m={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"special-features-for-metaflow"},"Special Features For Metaflow"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"nbdoc")," is an open source project developed at ",(0,s.kt)("a",{parentName:"p",href:"https://outerbounds.com"},"Outerbounds"),", with the goal of having high quality documentation for ",(0,s.kt)("a",{parentName:"p",href:"https://metaflow.org"},"Metaflow"),".  Therefore, it should be no surprise that there are some special features made specifically for Metaflow."),(0,s.kt)("p",null,"First, consider this basic Flow:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="myflow.py"',title:'"myflow.py"'},'from metaflow import FlowSpec, step\n\n\nclass MyFlow(FlowSpec):\n    @step\n    def start(self):\n        self.some_data = ["some", "data"]\n        self.next(self.middle)\n\n    @step\n    def middle(self):\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\n\nif __name__ == "__main__":\n    MyFlow()\n')),(0,s.kt)("p",null,"If you were to run this script with the magic command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ipython"},"! python run myflow.py\n")),(0,s.kt)("p",null,"You would normally get output that looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Metaflow 2.5.3 executing MyFlow for user:hamel\nValidating your flow...\n    The graph looks good!\nRunning pylint...\n    Pylint is happy!\n2022-03-24 11:06:46.769 Workflow starting (run-id 1648145206766542):\n2022-03-24 11:06:46.776 [1648145206766542/start/1 (pid 81929)] Task is starting.\n2022-03-24 11:06:47.549 [1648145206766542/start/1 (pid 81929)] Task finished successfully.\n2022-03-24 11:06:47.557 [1648145206766542/middle/2 (pid 81932)] Task is starting.\n2022-03-24 11:06:48.371 [1648145206766542/middle/2 (pid 81932)] Task finished successfully.\n2022-03-24 11:06:48.379 [1648145206766542/end/3 (pid 81935)] Task is starting.\n2022-03-24 11:06:49.133 [1648145206766542/end/3 (pid 81935)] Task finished successfully.\n2022-03-24 11:06:49.134 Done!\n")),(0,s.kt)("p",null,"However, ",(0,s.kt)("inlineCode",{parentName:"p"},"nbdoc")," automatically detects and cleans up the output to remove extreanous information, which looks like this (see the rendered page)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"python myflow.py run\n")),(0,s.kt)(d,{lang:"bash",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"}," Workflow starting (run-id 1658167341540184):\n [1658167341540184/start/1 (pid 2580)] Task is starting.\n [1658167341540184/start/1 (pid 2580)] Task finished successfully.\n [1658167341540184/middle/2 (pid 2583)] Task is starting.\n [1658167341540184/middle/2 (pid 2583)] Task finished successfully.\n [1658167341540184/end/3 (pid 2587)] Task is starting.\n [1658167341540184/end/3 (pid 2587)] Task finished successfully.\n Done!\n"))),(0,s.kt)("p",null,"You can also choose to only show certain steps from your Flow with the ",(0,s.kt)("inlineCode",{parentName:"p"},"meta:show_steps=<step1_name>,<step2_name>"),' comment.  The cell input looks like this.  Note that the comment is stripped out and only the "middle" step is showing'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#meta:show_steps=middle\n!python myflow.py run --run-id-file run_id.txt\n")),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you want to interact with a Flow, we recommend using the ",(0,s.kt)("inlineCode",{parentName:"p"},"--run-id-file <filemame>")," flag."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"python myflow.py run --run-id-file run_id.txt\n")),(0,s.kt)(d,{lang:"bash",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"...\n [1658167344397922/middle/2 (pid 2662)] Task is starting.\n [1658167344397922/middle/2 (pid 2662)] Task finished successfully.\n...\n"))),(0,s.kt)("p",null,"You can retrieve results from your flow like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'run_id = !cat run_id.txt\nfrom metaflow import Run\n\nrun = Run(f"MyFlow/{run_id[0]}")\n\nrun.data.some_data\n')),(0,s.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"['some', 'data']\n"))),(0,s.kt)("p",null,"It is often smart to run tests in your docs.  To do this, simply add assert statements.  These will get tested automatically when we run the test suite."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'assert run.data.some_data == ["some", "data"]\nassert run.successful\n')))}f.isMDXComponent=!0}}]);